Nix-Gui's Settings Views provide a more intuitive way of editing NixOS options. The Settings DSL provides a way of configuring a transformation of the options tree into a more helpful Settings View.

* Transformations

** Regrouping

Settings arent edited by navigating the options heirarchy. instead, Settings combine interrelated options together onto a single FieldView.

For example, =services.bluemon= and =hardware.bluetooth= are related, but on different branches of the option hierarchy.

** Retyping

The default FieldWidget for an option can be suboptimal for the following reasons
- the option may be be an =Either= type with many choices when a specific single type makes the most sense
- it may be a =String= type but the set of sane strings may be limited, meaning it should be recast as =OneOf= (e.g. keyboard layout)
- the option may be something like "hashed password", in which case we want a custom type that allows the user to be able to type a censored password which is converted and saved as a hash.

** Implicitly Deriving

Some option values should be automatically set based on the value of a setting. For example it *may* be desirable that "enable bluetooth" impacts both =hardware.bluetooth.enable= and =services.bluemon.enable=

* Spec

=nix-gui/nixui/settings/= shall contain one HJSON file per Setting View. The HJSON file shall follow JSON standards with the exception of allowing legal HJSON comments.

The file shall use the following format:
#+begin_json
{
  # Title which is displayer in the navlist
  "title": "Users and Groups",

  # All remaining keys are rendered as titles to tabs within the FieldsVkew
  # If there is only one addition key, tabbing isn't used.

  "Users": {
    # Each key within a task maps a setting name to its definition
    "Default Shell": {
      # The simplest setting only has the `option` key
      "option": "users.defaultUserShell"
    },
    "Users": {
      #TODO
    }
  },

  "Groups": {...}
}
#+end_json


* Nota bene
This spec should be a generalized enough for the creation of a wide variety of Settings View. As such, the first version of this spec will not be considered complete until we it has been used to implement two Settings Views: "Users and Groups" and "Services"
