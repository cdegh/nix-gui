Nix-Gui's Settings Views provide a more intuitive way of editing NixOS options. The Settings DSL provides a way of configuring a transformation of the options tree into a Settings View.

* Transformations

** Regrouping

Unlike the option tree view, Settings aren't grouped together based on the options heirarchy. Instead, the Settings DSL allows the combination of interrelated options onto a single display.

For example, it may make sense to combine =services.blueman.enable= and =hardware.bluetooth.*= into a single settings view.

** Retyping

The default =FieldWidget= for an option can be suboptimal for the following reasons
- the associated option may be be an =Either= type with many choices when a specified single type makes the most sense
- it may be a =String= type but the set of sane strings may be limited, meaning it should be recast as =OneOf= (e.g. keyboard layout)
- the option may be something like "hashed password", in which case we want a custom type that lets the user type a censored password which is saved as its hash.

** Implicitly Deriving

Some option values should be automatically set based on the value of another setting. For example it *may* be desirable that "enable bluetooth" impacts both =hardware.bluetooth.enable= and =services.bluemon.enable=.

* Specification

=nix-gui/nixui/settings/= shall contain one [[https://commentjson.readthedocs.io/en/latest/][commentjson]] file per Settings View.

The file shall use the following format:
#+begin_src
{
  # Title which is displayer in the navlist
  "title": "Users and Groups",

  # Icon to display from https://github.com/darkomarko42/Luna-Icons/blob/master/Luna/symbolic/apps/system-users-symbolic.svg
  "icon": "luna/symbolic/apps/system-users-symbolic.svg",

  # All remaining keys are rendered as titles to tabs within the FieldsView
  # If there is only one addition key, tabbing isn't used.

  "Users": {
    # Each key within a tab maps a setting name to its definition
    "Default Shell": {
      # The simplest setting only has the `option` key
      "option": "users.defaultUserShell"
    },
    "Users": {
      # use table field to render multiple options
      "field": "Table",

      # passed parameters to contruct Table field
      "params": {

        # no option specified for Login, its value will be the path for the other columns
        "Login": {"path": "users.extrausers.{value}"},

        # modify the option path specified by Login
        "Name": {"option": "{Login}.name"},

        # by default UID is null or signed integer, we don't want null UID, so we use a type override
        "UID": {"option": "{Login}.uid", "type": "IntType()"}
      }
  },

  # second tab (not implemented in this example)
  "Groups": {}
}
#+end_src


* Nota bene
This spec should be a generalized enough for the creation of a wide variety of Settings Views. As such, the first version of this spec will not be considered complete until we it has been used to implement two Settings Views: "Users and Groups" and "Services".
